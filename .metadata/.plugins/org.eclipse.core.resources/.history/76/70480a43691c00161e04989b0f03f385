package com.automatic.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.Validator;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.automatic.database.CreateStudentHelper;
import com.automatic.database.DatabaseConnector;
import com.automatic.database.FetchStudents;
import com.automatic.database.GrantAccess;
import com.automatic.models.AccessModel;
import com.automatic.models.CreateStudentResponse;
import com.automatic.models.LoginModel;
import com.automatic.models.StudentModel;

@Controller
public class AutomaticController
{
	@Autowired
	@Qualifier("loginValidator")
	private Validator validator;

	@InitBinder
	private void initBinder(WebDataBinder binder)
	{
	   binder.setValidator(validator);
	}
	
	@RequestMapping(value = "/login", method = RequestMethod.GET)
	public ModelAndView getLogin() 
	{
		LoginModel model = new LoginModel();
	      return new ModelAndView("login", "form", model);
	}
	
	@RequestMapping(method = RequestMethod.POST, value="/home")
	public String submitLogin(Model model, @Validated LoginModel loginModel, BindingResult result)
	{
		String returnVal = "register";
		
	        if(result.hasErrors())
            {
	        	System.out.println(result.getFieldErrors().get(0).getDefaultMessage());
	        	loginModel.setLoginCredentialError(null);
	        	model.addAttribute("form", loginModel);
	            returnVal = "login";
	        }
	        else 
	        {
	        	model.addAttribute("form", loginModel);
	        }      
	        return returnVal;	
	}
	
	@RequestMapping(method = RequestMethod.GET, value = "allStudents")
	public String getAllStudents(Model model)
	{
		model.addAttribute("students", FetchStudents.getStudentList());
		//ModelAndView mv = new ModelAndView("allStudents");
		return "allStudents";
	}
	
	@RequestMapping(method = RequestMethod.POST, value="/createStudent", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<CreateStudentResponse> createStudent(@RequestParam("firstname") String firstName, @RequestParam("secondname") String secondName,
			@RequestParam("course") String course, @RequestParam("studentnumber") String studentNumber, @RequestParam("courseduration") String courseDuration)
	{
		DatabaseConnector connector = new DatabaseConnector();
		CreateStudentResponse response = new CreateStudentResponse();
		
		CreateStudentHelper helper = new CreateStudentHelper(connector.getConnection(), studentNumber, firstName, secondName, course, courseDuration);
		
		if(helper.checkStudent(studentNumber))
		{
			String accessCode = helper.insertStudent();
			response.setStatusCode(201);
			response.setAccessCode(accessCode);
			response.setMessage("Student successfully created");
			return new ResponseEntity<CreateStudentResponse>(response, HttpStatus.CREATED);
		}
		else
		{
			response.setStatusCode(409);
			response.setAccessCode(null);
			response.setMessage("Student wasn't created");
			return new ResponseEntity<CreateStudentResponse>(response, HttpStatus.CONFLICT);
		}
		
		
	}
	
	@RequestMapping(method = RequestMethod.POST, value="/access", produces = MediaType.ALL_VALUE)
	public ResponseEntity<String> accessHandler(@RequestParam("studentNumber") String studentNumber, @RequestParam("accessCode") String accessCode)
	{
		GrantAccess grantAccess = new GrantAccess(studentNumber, accessCode);
		
		return new ResponseEntity<String>(String.valueOf(grantAccess.isGranted()), HttpStatus.ACCEPTED);
	}
	
	@RequestMapping(method = RequestMethod.DELETE, value="checkout", produces = MediaType.ALL_VALUE)
	public ResponseEntity<String> checkOut(@RequestParam("accessCode") String accessCode)
	{
		return new ResponseEntity<String>(null);
	}

}
